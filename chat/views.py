from django.shortcuts import render, redirect
import google.generativeai as genai
from django.conf import settings
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from .models import ChatMessage, ChatSession
import uuid
import json


genai.configure(api_key=settings.GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-2.0-flash')


def index(request):
    return render(request, 'chat/index.html', {})


@csrf_exempt
def chatbot(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
        except json.JSONDecodeError:
            return JsonResponse({"error": "Invalid JSON"}, status=400)

        user_input = data.get("message")
        if not user_input:
            return JsonResponse({"error": "No message provided"}, status=400)

        session_id = data.get("session_id", str(uuid.uuid4()))
        order_history = data.get("order_history", "").strip()

        ChatMessage.objects.create(sender="user", message=user_input, session_id=session_id)

        session, created = ChatSession.objects.get_or_create(session_id=session_id)

        order_history = data.get("order_history", "").strip()

        if order_history:
            session.order_history = order_history
            session.save()
        else:
            order_history = session.order_history or ""

        try:
            initial_prompt = """
                You are Baboon, a helpful, friendly, and professional customer support assistant for the Baboon food delivery platform in Albania. Your job is to assist users with:

                - Delivery status (explain if food is on the way or delayed)
                - Payment issues (failed payment, refunds, invoice questions)
                - Menu inquiries (available dishes, dietary info)
                - Order changes (cancel, update, contact restaurant)
                - General platform support

                Be concise and polite. If you're not sure about something or the request requires human intervention, say:

                "I'm escalating this to a human agent. Please hold on a moment."

                Never make up order details or delivery times, unless they're in the order history.

                Always answer in a casual but respectful tone.

                You're not allowed to give out sensitive info or speculate. Always stay within your knowledge (which includes the order and chat history below) and escalate when unsure.
            """

            if order_history:
                order_context = f"\n\nHere is the user's order history:\n{order_history.strip()}\n"
            else:
                order_context = ""

            history = ChatMessage.objects.filter(session_id=session_id).order_by("-timestamp")[:10][::-1]
            chat_history = "\n\n"
            for msg in history:
                prefix = "User" if msg.sender == "user" else "Bot"
                chat_history += f"{prefix}: {msg.message}\n"

            full_prompt = initial_prompt + order_context + chat_history + f"User: {user_input}"
            response = model.generate_content(full_prompt)
            ai_message = response.text.strip()

            lower_msg = ai_message.lower()
            keyword_trigger = any(phrase in lower_msg for phrase in [
                "not sure", "i don't know", "can't help", "escalate", "human agent", "contact support"
            ])

            escalation_check_prompt = f"""
                You are monitoring customer support responses. The following response was generated by an AI assistant:

                "{ai_message}"

                Does this message indicate the assistant is uncertain or requires a human agent to continue? Reply with only "yes" or "no".
            """
            escalation_response = model.generate_content(escalation_check_prompt)
            needs_human = escalation_response.text.strip().lower() == "yes"

            if keyword_trigger or needs_human:
                ChatMessage.objects.create(sender="bot", message="I'm escalating this to a human agent. Please hold on a moment.", session_id=session_id)
                return JsonResponse({"response": "I'm escalating this to a human agent. Please hold on a moment.", "escalated": True})

            ChatMessage.objects.create(sender="bot", message=ai_message, session_id=session_id)
            return JsonResponse({"response": ai_message, "escalated": False})

        except Exception as e:
            print(f"Gemini error: {e}")
            ChatMessage.objects.create(sender="bot", message="Oops! Something went wrong.", session_id=session_id)
            return JsonResponse({"response": "Oops! Something went wrong.", "escalated": False})


def operator_dashboard(request):
    sessions = ChatMessage.objects.values_list("session_id", flat=True).distinct()
    session_id = request.GET.get("session", sessions[0] if sessions else None)
    messages = ChatMessage.objects.filter(session_id=session_id).order_by("timestamp") if session_id else []

    if request.method == "POST":
        reply = request.POST.get("reply")
        session_id = request.GET.get("session")
        if session_id and reply:
            ChatMessage.objects.create(sender="human", message=reply, session_id=session_id)
            ChatSession.objects.update_or_create(session_id=session_id, defaults={"is_human": True})

    return render(request, "chat/dashboard.html", {"messages": messages, "sessions": sessions, "current": session_id})


@csrf_exempt
def get_chat_history(request):
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            session_id = data.get("session_id")
            if not session_id:
                return JsonResponse({"error": "Missing session_id"}, status=400)

            messages = ChatMessage.objects.filter(session_id=session_id).order_by("timestamp")
            session = ChatSession.objects.filter(session_id=session_id).first()

            chat_data = [
                {"sender": msg.sender, "message": msg.message, "timestamp": msg.timestamp.isoformat()}
                for msg in messages
            ]
            return JsonResponse({
                "chat": chat_data,
                "order_history": session.order_history if session else ""
            })

        except Exception as e:
            return JsonResponse({"error": str(e)}, status=500)

    return JsonResponse({"error": "Only POST method allowed"}, status=405)
